Machine Learning for Data Analysis Course
Wesleyan University

Week 1. Decision Trees

Assignment: Running a Classification Tree



---[tree.png]---

The LendingClub (https://www.lendingclub.com/) is a peer-to-peer leading company that directly connects borrowers and potential lenders/investors. In this job, we will build a classification model to predict whether or not a loan provided by LendingClub is likely to default, that is, to predict whether a loan will be paid off in full or the loan will be charged off and possibly go into default.

The following variables were include as possible contributors to a classification tree model evaluating safe loans ('safe_loans': +1 means safe, -1 is risky), grade and sub-grade of the loan ('grade' and 'sub_grade', both categoricals), indicator of one year or less of employment ('short_emp'), number of years of employment ('emp_length_num'), home_ownership status ('home_ownership', categorical variable: own, mortgage or rent), debt to income ratio ('dti'), the purpose of the loan ('purpose', categorical variable: medical, house, moving, major_purchase, etc.), the term of the loan ('term', categorical variable: 36 or 60 months), indicator if has borrower had a delinquincy ('last_delinq_none': 0 or 1), indicator if has borrower had 90 day or worse rating ('last_major_derog_none': 0 or 1), percent of available credit being used ('revol_util') and total late fees received to day ('total_rec_late_fee')

Because categorical features are not supported yet by skylearn DecisionTreeClassifier, categorical features were converted into integer variables, interpreted as continuous variables. Therefore, we find comparisons such as 'purpose <= 1.5', which is not consistent with reality.

The model run was limited to 5 levels deep in order to keep the classification tree in a reasonable size.

The total late fees received to day is the first variable used to separate the sample into two subgroups: borrowers with no late fees received to day, left branch, and borrowers with one or more late fees received to day, right branch. The Gini impurity index (which is a measure of how often a randomly chosen element from the set would be incorrectly labeled if it was randomly labeled according to the distribution of labels in the subset) is equal to 0.31.

On the borrowers with one or more late fees group, right branch, a further subdivision was made with the term of the loan: 36 or 60 months (gini = 0.495, quite fifty-fifty distribution). In 36 months loans (left branch), the samble is splitted into two subgroups according to the debt to income ratio: dti <= 6.795 and dti > 6.795...

This process of navegating thru the decission tree continues until we reach a leaf at the end of the branch. The resulting condition is determinated, usually, by the majority vote. For example (following allways the left branch): if no late fees received to day (total_rec_late_fee <= 0.005) >> 36 months loan (term <= 0.5) >> grade <= 3.5 (hard to interpretate due to 'grade' is a categorical variable) >> grade <= 0.5 >> purpose <= 1.5 (same comment) >> SAFE OPERATION (value = [151, 313])

The total model classified 54.3% of the sample correctly on the train set, and got an accuracy score of 81.4% on the test set.


Python source file, iPython Notebook and other related files could be found at https://github.com/MColosso/Wesleyan.-Machine-Learning-for-Data-Analysis


SOURCE CODE

#
# Created on Sun Dec 13 21:12:54 2015
#
# @author: ldierker
#

from pandas import Series, DataFrame
import pandas as pd
import numpy as np
import os
import matplotlib.pylab as plt
from sklearn.cross_validation import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
import sklearn.metrics

#pd.set_option('display.float_format', lambda x:'%.3f'%x)

#os.chdir("C:/Users/MColosso/Documents/CURSOS/Wesleyan University/Machine Learning for Data Analysis")


#
# Data Engineering and Analysis
#

#Load the dataset

loans = pd.read_csv("./LendingClub.csv", low_memory = False)

# LendingClub.csv is a dataset taken from The LendingClub (https://www.lendingclub.com/)
# which is a peer-to-peer leading company that directly connects borrowers and potential
# lenders/investors


#
# Exploring the target column
#

# The target column (label column) of the dataset that we are interested in is called
# `bad_loans`. In this column **1** means a risky (bad) loan **0** means a safe  loan.
#
# In order to make this more intuitive, we reassign the target to be:
# * **+1** as a safe  loan, 
# * **-1** as a risky (bad) loan. 
#
# We put this in a new column called `safe_loans`.

loans['safe_loans'] = loans['bad_loans'].apply(lambda x : +1 if x==0 else -1)
loans.drop('bad_loans', axis=1, inplace=True)

features = ['grade',                     # grade of the loan
            'sub_grade',                 # sub-grade of the loan
            'short_emp',                 # one year or less of employment
            'emp_length_num',            # number of years of employment
            'home_ownership',            # home_ownership status: own, mortgage or rent
            'dti',                       # debt to income ratio
            'purpose',                   # the purpose of the loan
            'term',                      # the term of the loan
            'last_delinq_none',          # has borrower had a delinquincy
            'last_major_derog_none',     # has borrower had 90 day or worse rating
            'revol_util',                # percent of available credit being used
            'total_rec_late_fee',        # total late fees received to day
           ]

target = 'safe_loans'                   # prediction target (y) (+1 means safe, -1 is risky)

# Extract the feature columns and target column
loans = loans[features + [target]]

# Delete rows where any or all of the data are missing
data_clean = loans.dropna()

# Convert categorical variables into quantitative variables
# (Categorical features are not, yet, supported by sklearn DecisionTreeClassifier)
categorical_variables = ['grade', 'sub_grade', 'home_ownership', 'purpose', 'term']
conversion_list = list()
for var in categorical_variables:
    categorical_values = list(set(data_clean[var]))
    conversion_list.append([var, categorical_values])
    data_clean[var] = [categorical_values.index(idx) for idx in data_clean[var] ]

cv_list = pd.DataFrame(conversion_list, columns=['variable', 'old_values'])
cv_list

print(data_clean.dtypes)

print((data_clean.describe()).T)


#
# Modeling and Prediction
#

#Split into training and testing sets

predictors = data_clean[features]

targets = data_clean.safe_loans

pred_train, pred_test, tar_train, tar_test = train_test_split(predictors, targets, 
                                                              test_size = .4)
print('pred_train.shape', pred_train.shape)
print('pred_test.shape',  pred_test.shape)
print('tar_train.shape',  tar_train.shape)
print('tar_test.shape',   tar_test.shape)

#Build model on training data
classifier = DecisionTreeClassifier(max_depth = 5)   #Limit the deep of the tree
                                                     #to 5 levels
classifier = classifier.fit(pred_train, tar_train)

predictions = classifier.predict(pred_test)

conf_matrix = sklearn.metrics.confusion_matrix(tar_test, predictions)

print(conf_matrix)

sklearn.metrics.accuracy_score(tar_test, predictions)

#Displaying the decision tree
from sklearn import tree
#from StringIO import StringIO
from io import StringIO
#from StringIO import StringIO 
from IPython.display import Image

out = StringIO()
tree.export_graphviz(classifier, 
                     out_file = out,    #out_file = 'tree.dot'
                     feature_names = features)

# If you use a filename (like 'tree.dot') you can render this GraphViz representation
# of the decision tree using, for example:
#    $ dot -Tpng tree.dot -o tree.png

import pydotplus
graph = pydotplus.graph_from_dot_data(out.getvalue())
Image(graph.create_png())


FINAL NOTES

I got an error when trying to plot the graph: "GraphViz's executables not found" on a Windows 10 system, using Python 3.5.1 on a Jupiter Notebook 4.1.0 environment after installing GraphViz using “pip install Graphviz”. The problem is that the path to GraphViz was not found by the pydot module. Searching gvedit.exe in all hard disk got not results, so we had to install GraphViz executables from http://www.graphviz.org/Download_windows.php (graphviz-2.38.msi) and set the path environmental variable.
